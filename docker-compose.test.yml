version: '3.7'

services:

  tests:
    restart: "unless-stopped"
    build:
      context: ./
      dockerfile: ./build/Dockerfile
    depends_on:
      - redis_test
      - postgres_test
      - faketarget
      - api
      - rqworker
      - parser
    networks:
      - app_net
    env_file:
      - ./tests/.env.test   
    command: sleep 4s && pytest -v

  faketarget:
    image: "halverneus/static-file-server:latest"
    volumes:
      - ./tests/html:/web
    networks:
      - app_net
    environment:
      - PORT=8099
    ports: 
      - '8099:8099'
    
  postgres_test:
    restart: "unless-stopped"
    image: "postgres"
    ports: 
      - '5432:5432'
    networks:
      - app_net
    env_file:
      - ./tests/.env.test
    logging:
      driver: none


  redis_test:
    restart: "unless-stopped"
    image: "redis"
    networks:
      - app_net
    env_file:
      - ./tests/.env.test
    logging:
      driver: none

  api:
    restart: "unless-stopped"
    build:
      context: ./
      dockerfile: ./build/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - redis_test
      - postgres_test
    networks:
      - app_net
    env_file:
      - ./tests/.env.test
    command: gunicorn --bind 0.0.0.0:${APIPORT:-8000} --workers=${WORKERS:-5} server:app

  rqworker:
    restart: "unless-stopped"
    build:
      context: ./
      dockerfile: ./build/Dockerfile
    depends_on:
      - redis_test
      - postgres_test
    networks:
      - app_net
    env_file:
      - ./tests/.env.test
    command: rq worker --url=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB} high default low 
  
  parser: 
    restart: "unless-stopped"
    build:
      context: ./
      dockerfile: ./build/Dockerfile
    depends_on:
      - redis_test
      - postgres_test
    networks:
      - app_net
    env_file:
      - ./tests/.env.test
    command: python parser.py && rqscheduler --host ${REDIS_HOST} --port ${REDIS_PORT} --db ${REDIS_DB}

networks:
  app_net:
    driver: "bridge"